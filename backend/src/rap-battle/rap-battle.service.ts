import { Injectable, Logger } from '@nestjs/common';
import OpenAI from 'openai';
import { ConfigService } from '@nestjs/config';
import { CohereClientV2 } from 'cohere-ai';

@Injectable()
export class RapBattleService {
  private readonly logger = new Logger(RapBattleService.name);
  private openai: OpenAI;
  private cohereClient: CohereClientV2;

  constructor(private configService: ConfigService) {
    this.openai = new OpenAI({
      apiKey: this.configService.get<string>('OPENAI_API_KEY'),
    });

    this.cohereClient = new CohereClientV2({
      token: this.configService.get<string>('COHERE_API_KEY'),
    });
  }

  /**
   * Streams rap lines generated by OpenAI (GPT-3.5-turbo) in real-time.
   * @param prompt - The prompt to initiate the rap generation for GPT-3.5-turbo.
   * @returns An async generator yielding the text generated by OpenAI.
   */
  async *streamOpenAiRap(prompt: string): AsyncGenerator<string> {
    this.logger.log(`Starting OpenAI rap generation with prompt: ${prompt}`);
    const stream = await this.openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: 'You are a rapper.' },
        { role: 'user', content: prompt },
      ],
      stream: true,
    });

    for await (const chunk of stream) {
      const content = chunk.choices[0]?.delta?.content;
      if (content) {
        this.logger.debug(`OpenAI generated chunk: ${content}`);
        yield content;
      }
    }
  }

  /**
   * Generates a full rap response from Cohere (no streaming support).
   * @param prompt - The prompt to initiate the rap generation for Cohere.
   * @returns An async generator yielding the full response from Cohere.
   */
  async *streamCohereRap(prompt: string): AsyncGenerator<string> {
    this.logger.log(`Starting Cohere rap generation with prompt: ${prompt}`);
    const response = await this.cohereClient.chat({
      model: 'command-r-plus',
      messages: [{ role: 'user', content: prompt }],
    });

    const text = response.message.content[0].text;
    this.logger.debug(`Cohere generated response: ${text}`);
    yield text;
  }

  /**
   * Orchestrates a rap battle between OpenAI (GPT-3.5-turbo) and Cohere's 'command-r-plus'.
   * Alternates between the two models for multiple rounds, generating responses based on the previous round.
   * @param theme - The theme or topic for the rap battle.
   * @returns An async generator yielding the generated responses for each round of the rap battle.
   */
  async *rapBattleStream(theme: string): AsyncGenerator<string> {
    this.logger.log(`Starting rap battle with theme: ${theme}`);
    let openAiPrompt = `Start a rap battle on the theme: ${theme}`;
    let coherePrompt = '';
    let conversationHistory = `Theme: ${theme}\nThis is a rap battle between OpenAI and Cohere.\n\n`;

    for (let round = 1; round <= 5; round++) {
      this.logger.log(`Round ${round}: OpenAI's turn`);
      let openAiResponse = '';
      const openAiStream = this.streamOpenAiRap(openAiPrompt);
      for await (const chunk of openAiStream) {
        openAiResponse += chunk;
        yield chunk;
      }

      conversationHistory += `OpenAI: ${openAiResponse}\n`;
      this.logger.log(
        `OpenAI completed round ${round} with response: ${openAiResponse}`,
      );

      coherePrompt = `${conversationHistory}\nCohere, respond to OpenAI's latest rap line: "${openAiResponse}" with a verse that keeps the rap battle spirit and outshines OpenAI.`;

      this.logger.log(`Round ${round}: Cohere's turn`);
      let cohereResponse = '';
      const cohereStream = this.streamCohereRap(coherePrompt);
      for await (const chunk of cohereStream) {
        cohereResponse += chunk;
        yield chunk;
      }

      conversationHistory += `Cohere: ${cohereResponse}\n`;
      this.logger.log(
        `Cohere completed round ${round} with response: ${cohereResponse}`,
      );

      openAiPrompt = `${conversationHistory}\nOpenAI, respond to Cohere's latest rap line: "${cohereResponse}" with an even better verse in the rap battle.`;
    }

    this.logger.log('Rap battle complete.');
  }
}
